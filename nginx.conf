worker_processes  1;

error_log  logs/error.log  info;

events {
  worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    access_log      off;

    sendfile        on;
    #tcp_nopush     on;

    # key must be of 32 bytes long
    encrypted_session_key "${SESSION_KEY}";

    # iv must not be longer than 16 bytes
    #   default: "deadbeefdeadbeef" (w/o quotes)
    encrypted_session_iv "${SESSION_IV}";

    # default: 1d (1 day)
    encrypted_session_expires 3600; # in sec

    server {
        listen       80;
        server_name  localhost;

        location / {
            root   html;
            index  index.html index.htm;
        }

        location /encrypt {
            set $text $arg_text;
            set_if_empty $text 'This is THE TEXT to be Encrypted!';
            set_encrypt_session $text_encoded $text;
            set_encode_base64 $text_encoded; # from the ngx_set_misc module

            default_type text/html;
            content_by_lua_block {
                ngx.say(ngx.var.text_encoded)
            }
        }

        location /decrypt {
            set $text_encoded $arg_text;
            set_if_empty $text_encoded 'lINbAuh1GsUUhV+60Pi+fTeJYUbajr6b51BnJ2dbkreLK7jKv/TkaAYbLot8HRpfPUuUfV8jmjyBHNOCeTNDkg==';

            set_decode_base64 $text_encoded; # from the ngx_set_misc module
            set_decrypt_session $text $text_encoded;

            if ($text = '') {
                content_by_lua_block {
                    ngx.say('DECRYPTION FAILED')
                }
            }

            content_by_lua_block {
                ngx.say(ngx.var.text)
            }
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }

}
